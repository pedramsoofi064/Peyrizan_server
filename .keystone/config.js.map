{
  "version": 3,
  "sources": ["../keystone.ts", "../lists/Image.list.ts", "../lists/User.list.ts", "../lists/mainPageImage.list.ts", "../lists/index.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport { config } from \"@keystone-6/core\";\n\n// to keep this file tidy, we define our schema in a different file\nimport { lists } from \"./schema\";\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport { withAuth, session } from \"./auth\";\n\nexport default withAuth(\n  config({\n    db: {\n      // we're using sqlite for the fastest startup experience\n      //   for more information on what database might be appropriate for you\n      //   see https://keystonejs.com/docs/guides/choosing-a-database#title\n      provider: \"sqlite\",\n      url: \"file:./keystone.db\",\n    },\n    storage: {\n      images: {\n        // Images that use this store will be stored on the local machine\n        kind: \"local\",\n        // This store is used for the image field type\n        type: \"image\",\n        // The URL that is returned in the Keystone GraphQL API\n        generateUrl: (path) => `/images${path}`,\n        // The route that will be created in Keystone's backend to serve the images\n        serverRoute: {\n          path: \"/images\",\n        },\n        // Set serverRoute to null if you don't want a route to be created in Keystone\n        // serverRoute: null\n        storagePath: \"public/images\",\n      },\n    },\n    lists,\n    session,\n  })\n);\n", "import { list } from \"@keystone-6/core\";\r\nimport { allowAll } from \"@keystone-6/core/access\";\r\nimport {\r\n  BaseAccessArgs,\r\n  AccessOperation,\r\n} from \"@keystone-6/core/dist/declarations/src/types/config/access-control\";\r\n\r\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\r\n//   this is a few common fields for an example\r\nimport {\r\n  text,\r\n  image,\r\n  relationship,\r\n  password,\r\n  timestamp,\r\n  select,\r\n} from \"@keystone-6/core/fields\";\r\n\r\nexport default list({\r\n  ui: {\r\n    label: \"\u062A\u0635\u0627\u0648\u06CC\u0631\",\r\n    description: \"\u062A\u0645\u0627\u0645 \u0641\u0627\u06CC\u0644\u200C\u0647\u0627\u06CC \u067E\u06CC\u0648\u0633\u062A\",\r\n  },\r\n  access: allowAll,\r\n  fields: {\r\n    title: text(),\r\n    alt: text(),\r\n    image: image({\r\n      storage: \"images\",\r\n    }),\r\n  },\r\n});\r\n", "import { list } from \"@keystone-6/core\";\r\nimport { allowAll } from \"@keystone-6/core/access\";\r\nimport {\r\n  BaseAccessArgs,\r\n  AccessOperation,\r\n} from \"@keystone-6/core/dist/declarations/src/types/config/access-control\";\r\n\r\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\r\n//   this is a few common fields for an example\r\nimport {\r\n  text,\r\n  image,\r\n  relationship,\r\n  password,\r\n  timestamp,\r\n  select,\r\n} from \"@keystone-6/core/fields\";\r\n\r\nexport default list({\r\n  ui: {\r\n    label: \"\u06A9\u0627\u0631\u0628\u0631\u0627\u0646\",\r\n  },\r\n  // WARNING\r\n  //   for this starter project, anyone can create, query, update and delete anything\r\n  //   if you want to prevent random people on the internet from accessing your data,\r\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\r\n  access: allowAll,\r\n\r\n  // this is the fields for our User list\r\n  fields: {\r\n    // by adding isRequired, we enforce that every User should have a name\r\n    //   if no name is provided, an error will be displayed\r\n    name: text({ validation: { isRequired: true } }),\r\n\r\n    email: text({\r\n      validation: { isRequired: true },\r\n      // by adding isIndexed: 'unique', we're saying that no user can have the same\r\n      // email as another user - this may or may not be a good idea for your project\r\n      isIndexed: \"unique\",\r\n    }),\r\n\r\n    password: password({ validation: { isRequired: true } }),\r\n\r\n    // we can use this field to see what Posts this User has authored\r\n    //   more on that in the Post list below\r\n    // posts: relationship({ ref: \"Post.author\", many: true }),\r\n\r\n    createdAt: timestamp({\r\n      // this sets the timestamp to Date.now() when the user is first created\r\n      defaultValue: { kind: \"now\" },\r\n    }),\r\n  },\r\n});\r\n", "import { list } from \"@keystone-6/core\";\r\nimport { allowAll } from \"@keystone-6/core/access\";\r\nimport {\r\n  BaseAccessArgs,\r\n  AccessOperation,\r\n} from \"@keystone-6/core/dist/declarations/src/types/config/access-control\";\r\n\r\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\r\n//   this is a few common fields for an example\r\nimport {\r\n  text,\r\n  image,\r\n  relationship,\r\n  password,\r\n  timestamp,\r\n  select,\r\n} from \"@keystone-6/core/fields\";\r\n\r\nexport default list({\r\n  ui: {\r\n    label: \"\u062A\u0635\u0627\u0648\u06CC\u0631 \u0635\u0641\u062D\u0647 \u0627\u0635\u0644\u06CC\",\r\n    description: \"\u062A\u0645\u0627\u0645 \u062A\u0635\u0627\u0648\u06CC\u0631 \u0642\u0633\u0645\u062A \u0627\u0648\u0644 \u0635\u0641\u062D\u0647 \u0627\u0635\u0644\u06CC\",\r\n  },\r\n  access: allowAll,\r\n  fields: {\r\n    name: text(),\r\n    image: relationship({ ref: 'Image', many: false })\r\n  },\r\n});\r\n", "import Image from \"./Image.list\";\r\nimport User from \"./User.list\";\r\nimport mainPageImage from \"./mainPageImage.list\";\r\nexport default {\r\n  Image,\r\n  User,\r\n  mainPageImage,\r\n};\r\n", "// Welcome to your schema\n//   Schema driven development is Keystone's modus operandi\n//\n// This file is where we define the lists, fields and hooks for our data.\n// If you want to learn more about how lists are configured, please read\n// - https://keystonejs.com/docs/config/lists\n\nimport { list } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\n\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n  select,\n} from \"@keystone-6/core/fields\";\n\n// the document field is a more complicated field, so it has it's own package\nimport { document } from \"@keystone-6/fields-document\";\n// if you want to make your own fields, see https://keystonejs.com/docs/guides/custom-fields\n\n// when using Typescript, you can refine your types to a stricter subset by importing\n// the generated types from '.keystone/types'\nimport { type Lists } from \".keystone/types\";\n\nimport AppList from \"./lists/index\";\n\nexport const lists = {\n  Image: AppList.Image,\n  User: AppList.User,\n  mainPageImage: AppList.mainPageImage,\n\n  // Post: list({\n  //   // WARNING\n  //   //   for this starter project, anyone can create, query, update and delete anything\n  //   //   if you want to prevent random people on the internet from accessing your data,\n  //   //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  //   access: allowAll,\n\n  //   // this is the fields for our Post list\n  //   fields: {\n  //     title: text({ validation: { isRequired: true } }),\n\n  //     // the document field can be used for making rich editable content\n  //     //   you can find out more at https://keystonejs.com/docs/guides/document-fields\n  //     content: document({\n  //       formatting: true,\n  //       layouts: [\n  //         [1, 1],\n  //         [1, 1, 1],\n  //         [2, 1],\n  //         [1, 2],\n  //         [1, 2, 1],\n  //       ],\n  //       links: true,\n  //       dividers: true,\n  //     }),\n\n  //     // with this field, you can set a User as the author for a Post\n  //     author: relationship({\n  //       // we could have used 'User', but then the relationship would only be 1-way\n  //       ref: \"User.posts\",\n\n  //       // this is some customisations for changing how this will look in the AdminUI\n  //       ui: {\n  //         displayMode: \"cards\",\n  //         cardFields: [\"name\", \"email\"],\n  //         inlineEdit: { fields: [\"name\", \"email\"] },\n  //         linkToItem: true,\n  //         inlineConnect: true,\n  //       },\n\n  //       // a Post can only have one author\n  //       //   this is the default, but we show it here for verbosity\n  //       many: false,\n  //     }),\n\n  //     // with this field, you can add some Tags to Posts\n  //     tags: relationship({\n  //       // we could have used 'Tag', but then the relationship would only be 1-way\n  //       ref: \"Tag.posts\",\n\n  //       // a Post can have many Tags, not just one\n  //       many: true,\n\n  //       // this is some customisations for changing how this will look in the AdminUI\n  //       ui: {\n  //         displayMode: \"cards\",\n  //         cardFields: [\"name\"],\n  //         inlineEdit: { fields: [\"name\"] },\n  //         linkToItem: true,\n  //         inlineConnect: true,\n  //         inlineCreate: { fields: [\"name\"] },\n  //       },\n  //     }),\n  //   },\n  // }),\n\n  // // this last list is our Tag list, it only has a name field for now\n  // Tag: list({\n  //   // WARNING\n  //   //   for this starter project, anyone can create, query, update and delete anything\n  //   //   if you want to prevent random people on the internet from accessing your data,\n  //   //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  //   access: allowAll,\n\n  //   // setting this to isHidden for the user interface prevents this list being visible in the Admin UI\n  //   ui: {\n  //     isHidden: true,\n  //   },\n\n  //   // this is the fields for our Tag list\n  //   fields: {\n  //     name: text(),\n  //     // this can be helpful to find out all the Posts associated with a Tag\n  //     posts: relationship({ ref: \"Post.tags\", many: true }),\n  //   },\n  // }),\n} satisfies Lists;\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'node:crypto'\nimport { createAuth } from '@keystone-6/auth'\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session'\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'email', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n})\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: process.env.SESSION_SECRET,\n})\n\nexport { withAuth, session }\n"],
  "mappings": "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",
  "names": ["import_core", "import_core", "import_access", "import_fields", "import_core", "import_access", "import_fields"]
}
