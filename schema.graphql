# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Image {
  id: ID!
  title: String
  alt: String
  image: ImageFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  title: StringFilter
  alt: StringFilter
}

input ImageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  alt: OrderDirection
}

input ImageUpdateInput {
  title: String
  alt: String
  image: ImageFieldInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  title: String
  alt: String
  image: ImageFieldInput
}

type MainPageImage {
  id: ID!
  alt: String
  image: ImageFieldOutput
}

input MainPageImageWhereUniqueInput {
  id: ID
}

input MainPageImageWhereInput {
  AND: [MainPageImageWhereInput!]
  OR: [MainPageImageWhereInput!]
  NOT: [MainPageImageWhereInput!]
  id: IDFilter
  alt: StringFilter
}

input MainPageImageOrderByInput {
  id: OrderDirection
  alt: OrderDirection
}

input MainPageImageUpdateInput {
  alt: String
  image: ImageFieldInput
}

input MainPageImageUpdateArgs {
  where: MainPageImageWhereUniqueInput!
  data: MainPageImageUpdateInput!
}

input MainPageImageCreateInput {
  alt: String
  image: ImageFieldInput
}

type Project {
  id: ID!
  titleFa: String
  titleEn: String
  summaryFa: String
  summaryEn: String
  descriptionFa: String
  descriptionEn: String
  employerFa: String
  employerEn: String
  advisorFa: String
  advisorEn: String
  locationFa: String
  locationEn: String
  progressPercentage: Int
  status: String
  startDate: DateTime
  endDate: DateTime
  images(where: ProjectImageWhereInput! = {}, orderBy: [ProjectImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectImageWhereUniqueInput): [ProjectImage!]
  imagesCount(where: ProjectImageWhereInput! = {}): Int
}

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  titleFa: StringFilter
  titleEn: StringFilter
  summaryFa: StringFilter
  summaryEn: StringFilter
  descriptionFa: StringFilter
  descriptionEn: StringFilter
  employerFa: StringFilter
  employerEn: StringFilter
  advisorFa: StringFilter
  advisorEn: StringFilter
  locationFa: StringFilter
  locationEn: StringFilter
  progressPercentage: IntNullableFilter
  status: StringNullableFilter
  startDate: DateTimeFilter
  endDate: DateTimeNullableFilter
  images: ProjectImageManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input ProjectImageManyRelationFilter {
  every: ProjectImageWhereInput
  some: ProjectImageWhereInput
  none: ProjectImageWhereInput
}

input ProjectOrderByInput {
  id: OrderDirection
  titleFa: OrderDirection
  titleEn: OrderDirection
  summaryFa: OrderDirection
  summaryEn: OrderDirection
  descriptionFa: OrderDirection
  descriptionEn: OrderDirection
  employerFa: OrderDirection
  employerEn: OrderDirection
  advisorFa: OrderDirection
  advisorEn: OrderDirection
  locationFa: OrderDirection
  locationEn: OrderDirection
  progressPercentage: OrderDirection
  status: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
}

input ProjectUpdateInput {
  titleFa: String
  titleEn: String
  summaryFa: String
  summaryEn: String
  descriptionFa: String
  descriptionEn: String
  employerFa: String
  employerEn: String
  advisorFa: String
  advisorEn: String
  locationFa: String
  locationEn: String
  progressPercentage: Int
  status: String
  startDate: DateTime
  endDate: DateTime
  images: ProjectImageRelateToManyForUpdateInput
}

input ProjectImageRelateToManyForUpdateInput {
  disconnect: [ProjectImageWhereUniqueInput!]
  set: [ProjectImageWhereUniqueInput!]
  create: [ProjectImageCreateInput!]
  connect: [ProjectImageWhereUniqueInput!]
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  titleFa: String
  titleEn: String
  summaryFa: String
  summaryEn: String
  descriptionFa: String
  descriptionEn: String
  employerFa: String
  employerEn: String
  advisorFa: String
  advisorEn: String
  locationFa: String
  locationEn: String
  progressPercentage: Int
  status: String
  startDate: DateTime
  endDate: DateTime
  images: ProjectImageRelateToManyForCreateInput
}

input ProjectImageRelateToManyForCreateInput {
  create: [ProjectImageCreateInput!]
  connect: [ProjectImageWhereUniqueInput!]
}

type ProjectImage {
  id: ID!
  alt: String
  file: ImageFieldOutput
  sortOrder: Int
  project: Project
}

input ProjectImageWhereUniqueInput {
  id: ID
}

input ProjectImageWhereInput {
  AND: [ProjectImageWhereInput!]
  OR: [ProjectImageWhereInput!]
  NOT: [ProjectImageWhereInput!]
  id: IDFilter
  alt: StringFilter
  sortOrder: IntNullableFilter
  project: ProjectWhereInput
}

input ProjectImageOrderByInput {
  id: OrderDirection
  alt: OrderDirection
  sortOrder: OrderDirection
}

input ProjectImageUpdateInput {
  alt: String
  file: ImageFieldInput
  sortOrder: Int
  project: ProjectRelateToOneForUpdateInput
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input ProjectImageUpdateArgs {
  where: ProjectImageWhereUniqueInput!
  data: ProjectImageUpdateInput!
}

input ProjectImageCreateInput {
  alt: String
  file: ImageFieldInput
  sortOrder: Int
  project: ProjectRelateToOneForCreateInput
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

type Certificate {
  id: ID!
  titleFa: String
  titleEn: String
  image: ImageFieldOutput
  date: DateTime
}

input CertificateWhereUniqueInput {
  id: ID
}

input CertificateWhereInput {
  AND: [CertificateWhereInput!]
  OR: [CertificateWhereInput!]
  NOT: [CertificateWhereInput!]
  id: IDFilter
  titleFa: StringFilter
  titleEn: StringFilter
  date: DateTimeFilter
}

input CertificateOrderByInput {
  id: OrderDirection
  titleFa: OrderDirection
  titleEn: OrderDirection
  date: OrderDirection
}

input CertificateUpdateInput {
  titleFa: String
  titleEn: String
  image: ImageFieldInput
  date: DateTime
}

input CertificateUpdateArgs {
  where: CertificateWhereUniqueInput!
  data: CertificateUpdateInput!
}

input CertificateCreateInput {
  titleFa: String
  titleEn: String
  image: ImageFieldInput
  date: DateTime
}

type Report {
  id: ID!
  titleFa: String
  titleEn: String
  summaryFa: String
  summaryEn: String
  descriptionFa: Report_descriptionFa_Document
  descriptionEn: Report_descriptionEn_Document
  date: DateTime
  file: ImageFieldOutput
  relatedReport: Report
}

type Report_descriptionFa_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Report_descriptionEn_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ReportWhereUniqueInput {
  id: ID
  relatedReport: ReportWhereUniqueInput
}

input ReportWhereInput {
  AND: [ReportWhereInput!]
  OR: [ReportWhereInput!]
  NOT: [ReportWhereInput!]
  id: IDFilter
  titleFa: StringFilter
  titleEn: StringFilter
  summaryFa: StringFilter
  summaryEn: StringFilter
  date: DateTimeFilter
  relatedReport: ReportWhereInput
}

input ReportOrderByInput {
  id: OrderDirection
  titleFa: OrderDirection
  titleEn: OrderDirection
  summaryFa: OrderDirection
  summaryEn: OrderDirection
  date: OrderDirection
}

input ReportUpdateInput {
  titleFa: String
  titleEn: String
  summaryFa: String
  summaryEn: String
  descriptionFa: JSON
  descriptionEn: JSON
  date: DateTime
  file: ImageFieldInput
  relatedReport: ReportRelateToOneForUpdateInput
}

input ReportRelateToOneForUpdateInput {
  create: ReportCreateInput
  connect: ReportWhereUniqueInput
  disconnect: Boolean
}

input ReportUpdateArgs {
  where: ReportWhereUniqueInput!
  data: ReportUpdateInput!
}

input ReportCreateInput {
  titleFa: String
  titleEn: String
  summaryFa: String
  summaryEn: String
  descriptionFa: JSON
  descriptionEn: JSON
  date: DateTime
  file: ImageFieldInput
  relatedReport: ReportRelateToOneForCreateInput
}

input ReportRelateToOneForCreateInput {
  create: ReportCreateInput
  connect: ReportWhereUniqueInput
}

type ReportImage {
  id: ID!
  alt: String
  file: ImageFieldOutput
}

input ReportImageWhereUniqueInput {
  id: ID
}

input ReportImageWhereInput {
  AND: [ReportImageWhereInput!]
  OR: [ReportImageWhereInput!]
  NOT: [ReportImageWhereInput!]
  id: IDFilter
  alt: StringFilter
}

input ReportImageOrderByInput {
  id: OrderDirection
  alt: OrderDirection
}

input ReportImageUpdateInput {
  alt: String
  file: ImageFieldInput
}

input ReportImageUpdateArgs {
  where: ReportImageWhereUniqueInput!
  data: ReportImageUpdateInput!
}

input ReportImageCreateInput {
  alt: String
  file: ImageFieldInput
}

type Award {
  id: ID!
  titleFa: String
  titleEn: String
  image: ImageFieldOutput
  date: DateTime
}

input AwardWhereUniqueInput {
  id: ID
}

input AwardWhereInput {
  AND: [AwardWhereInput!]
  OR: [AwardWhereInput!]
  NOT: [AwardWhereInput!]
  id: IDFilter
  titleFa: StringFilter
  titleEn: StringFilter
  date: DateTimeFilter
}

input AwardOrderByInput {
  id: OrderDirection
  titleFa: OrderDirection
  titleEn: OrderDirection
  date: OrderDirection
}

input AwardUpdateInput {
  titleFa: String
  titleEn: String
  image: ImageFieldInput
  date: DateTime
}

input AwardUpdateArgs {
  where: AwardWhereUniqueInput!
  data: AwardUpdateInput!
}

input AwardCreateInput {
  titleFa: String
  titleEn: String
  image: ImageFieldInput
  date: DateTime
}

type GalleryMedia {
  id: ID!
  file: FileFieldOutput
  type: String
  sortOrder: Int
  gallery: Gallery
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input GalleryMediaWhereUniqueInput {
  id: ID
}

input GalleryMediaWhereInput {
  AND: [GalleryMediaWhereInput!]
  OR: [GalleryMediaWhereInput!]
  NOT: [GalleryMediaWhereInput!]
  id: IDFilter
  type: StringNullableFilter
  sortOrder: IntNullableFilter
  gallery: GalleryWhereInput
}

input GalleryMediaOrderByInput {
  id: OrderDirection
  type: OrderDirection
  sortOrder: OrderDirection
}

input GalleryMediaUpdateInput {
  file: FileFieldInput
  type: String
  sortOrder: Int
  gallery: GalleryRelateToOneForUpdateInput
}

input FileFieldInput {
  upload: Upload!
}

input GalleryRelateToOneForUpdateInput {
  create: GalleryCreateInput
  connect: GalleryWhereUniqueInput
  disconnect: Boolean
}

input GalleryMediaUpdateArgs {
  where: GalleryMediaWhereUniqueInput!
  data: GalleryMediaUpdateInput!
}

input GalleryMediaCreateInput {
  file: FileFieldInput
  type: String
  sortOrder: Int
  gallery: GalleryRelateToOneForCreateInput
}

input GalleryRelateToOneForCreateInput {
  create: GalleryCreateInput
  connect: GalleryWhereUniqueInput
}

type Gallery {
  id: ID!
  titleFa: String
  titleEn: String
  descriptionFa: String
  descriptionEn: String
  date: DateTime
  medias(where: GalleryMediaWhereInput! = {}, orderBy: [GalleryMediaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GalleryMediaWhereUniqueInput): [GalleryMedia!]
  mediasCount(where: GalleryMediaWhereInput! = {}): Int
}

input GalleryWhereUniqueInput {
  id: ID
}

input GalleryWhereInput {
  AND: [GalleryWhereInput!]
  OR: [GalleryWhereInput!]
  NOT: [GalleryWhereInput!]
  id: IDFilter
  titleFa: StringFilter
  titleEn: StringFilter
  descriptionFa: StringFilter
  descriptionEn: StringFilter
  date: DateTimeFilter
  medias: GalleryMediaManyRelationFilter
}

input GalleryMediaManyRelationFilter {
  every: GalleryMediaWhereInput
  some: GalleryMediaWhereInput
  none: GalleryMediaWhereInput
}

input GalleryOrderByInput {
  id: OrderDirection
  titleFa: OrderDirection
  titleEn: OrderDirection
  descriptionFa: OrderDirection
  descriptionEn: OrderDirection
  date: OrderDirection
}

input GalleryUpdateInput {
  titleFa: String
  titleEn: String
  descriptionFa: String
  descriptionEn: String
  date: DateTime
  medias: GalleryMediaRelateToManyForUpdateInput
}

input GalleryMediaRelateToManyForUpdateInput {
  disconnect: [GalleryMediaWhereUniqueInput!]
  set: [GalleryMediaWhereUniqueInput!]
  create: [GalleryMediaCreateInput!]
  connect: [GalleryMediaWhereUniqueInput!]
}

input GalleryUpdateArgs {
  where: GalleryWhereUniqueInput!
  data: GalleryUpdateInput!
}

input GalleryCreateInput {
  titleFa: String
  titleEn: String
  descriptionFa: String
  descriptionEn: String
  date: DateTime
  medias: GalleryMediaRelateToManyForCreateInput
}

input GalleryMediaRelateToManyForCreateInput {
  create: [GalleryMediaCreateInput!]
  connect: [GalleryMediaWhereUniqueInput!]
}

type Comment {
  id: ID!
  firstName: String
  lastName: String
  email: String
  message: String
  createdAt: DateTime
}

input CommentWhereUniqueInput {
  id: ID
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  message: StringFilter
  createdAt: DateTimeNullableFilter
}

input CommentOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  message: OrderDirection
  createdAt: OrderDirection
}

input CommentUpdateInput {
  firstName: String
  lastName: String
  email: String
  message: String
  createdAt: DateTime
}

input CommentUpdateArgs {
  where: CommentWhereUniqueInput!
  data: CommentUpdateInput!
}

input CommentCreateInput {
  firstName: String
  lastName: String
  email: String
  message: String
  createdAt: DateTime
}

type Application {
  id: ID!
  fullName: String
  birthDate: CalendarDay
  gender: String
  marriageStatus: String
  email: String
  resume: FileFieldOutput
  createdAt: DateTime
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ApplicationWhereUniqueInput {
  id: ID
}

input ApplicationWhereInput {
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
  id: IDFilter
  fullName: StringFilter
  birthDate: CalendarDayNullableFilter
  gender: StringNullableFilter
  marriageStatus: StringNullableFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input ApplicationOrderByInput {
  id: OrderDirection
  fullName: OrderDirection
  birthDate: OrderDirection
  gender: OrderDirection
  marriageStatus: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

input ApplicationUpdateInput {
  fullName: String
  birthDate: CalendarDay
  gender: String
  marriageStatus: String
  email: String
  resume: FileFieldInput
  createdAt: DateTime
}

input ApplicationUpdateArgs {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateInput!
}

input ApplicationCreateInput {
  fullName: String
  birthDate: CalendarDay
  gender: String
  marriageStatus: String
  email: String
  resume: FileFieldInput
  createdAt: DateTime
}

type Employee {
  id: ID!
  fullNameFa: String
  fullNameEn: String
  position: String
}

input EmployeeWhereUniqueInput {
  id: ID
}

input EmployeeWhereInput {
  AND: [EmployeeWhereInput!]
  OR: [EmployeeWhereInput!]
  NOT: [EmployeeWhereInput!]
  id: IDFilter
  fullNameFa: StringFilter
  fullNameEn: StringFilter
  position: StringFilter
}

input EmployeeOrderByInput {
  id: OrderDirection
  fullNameFa: OrderDirection
  fullNameEn: OrderDirection
  position: OrderDirection
}

input EmployeeUpdateInput {
  fullNameFa: String
  fullNameEn: String
  position: String
}

input EmployeeUpdateArgs {
  where: EmployeeWhereUniqueInput!
  data: EmployeeUpdateInput!
}

input EmployeeCreateInput {
  fullNameFa: String
  fullNameEn: String
  position: String
}

type Machine {
  id: ID!
  titleFa: String
  titleEn: String
  count: Int
}

input MachineWhereUniqueInput {
  id: ID
}

input MachineWhereInput {
  AND: [MachineWhereInput!]
  OR: [MachineWhereInput!]
  NOT: [MachineWhereInput!]
  id: IDFilter
  titleFa: StringFilter
  titleEn: StringFilter
  count: IntFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input MachineOrderByInput {
  id: OrderDirection
  titleFa: OrderDirection
  titleEn: OrderDirection
  count: OrderDirection
}

input MachineUpdateInput {
  titleFa: String
  titleEn: String
  count: Int
}

input MachineUpdateArgs {
  where: MachineWhereUniqueInput!
  data: MachineUpdateInput!
}

input MachineCreateInput {
  titleFa: String
  titleEn: String
  count: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createMainPageImage(data: MainPageImageCreateInput!): MainPageImage
  createMainPageImages(data: [MainPageImageCreateInput!]!): [MainPageImage]
  updateMainPageImage(where: MainPageImageWhereUniqueInput!, data: MainPageImageUpdateInput!): MainPageImage
  updateMainPageImages(data: [MainPageImageUpdateArgs!]!): [MainPageImage]
  deleteMainPageImage(where: MainPageImageWhereUniqueInput!): MainPageImage
  deleteMainPageImages(where: [MainPageImageWhereUniqueInput!]!): [MainPageImage]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(where: ProjectWhereUniqueInput!, data: ProjectUpdateInput!): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createProjectImage(data: ProjectImageCreateInput!): ProjectImage
  createProjectImages(data: [ProjectImageCreateInput!]!): [ProjectImage]
  updateProjectImage(where: ProjectImageWhereUniqueInput!, data: ProjectImageUpdateInput!): ProjectImage
  updateProjectImages(data: [ProjectImageUpdateArgs!]!): [ProjectImage]
  deleteProjectImage(where: ProjectImageWhereUniqueInput!): ProjectImage
  deleteProjectImages(where: [ProjectImageWhereUniqueInput!]!): [ProjectImage]
  createCertificate(data: CertificateCreateInput!): Certificate
  createCertificates(data: [CertificateCreateInput!]!): [Certificate]
  updateCertificate(where: CertificateWhereUniqueInput!, data: CertificateUpdateInput!): Certificate
  updateCertificates(data: [CertificateUpdateArgs!]!): [Certificate]
  deleteCertificate(where: CertificateWhereUniqueInput!): Certificate
  deleteCertificates(where: [CertificateWhereUniqueInput!]!): [Certificate]
  createReport(data: ReportCreateInput!): Report
  createReports(data: [ReportCreateInput!]!): [Report]
  updateReport(where: ReportWhereUniqueInput!, data: ReportUpdateInput!): Report
  updateReports(data: [ReportUpdateArgs!]!): [Report]
  deleteReport(where: ReportWhereUniqueInput!): Report
  deleteReports(where: [ReportWhereUniqueInput!]!): [Report]
  createReportImage(data: ReportImageCreateInput!): ReportImage
  createReportImages(data: [ReportImageCreateInput!]!): [ReportImage]
  updateReportImage(where: ReportImageWhereUniqueInput!, data: ReportImageUpdateInput!): ReportImage
  updateReportImages(data: [ReportImageUpdateArgs!]!): [ReportImage]
  deleteReportImage(where: ReportImageWhereUniqueInput!): ReportImage
  deleteReportImages(where: [ReportImageWhereUniqueInput!]!): [ReportImage]
  createAward(data: AwardCreateInput!): Award
  createAwards(data: [AwardCreateInput!]!): [Award]
  updateAward(where: AwardWhereUniqueInput!, data: AwardUpdateInput!): Award
  updateAwards(data: [AwardUpdateArgs!]!): [Award]
  deleteAward(where: AwardWhereUniqueInput!): Award
  deleteAwards(where: [AwardWhereUniqueInput!]!): [Award]
  createGalleryMedia(data: GalleryMediaCreateInput!): GalleryMedia
  createGalleryMedias(data: [GalleryMediaCreateInput!]!): [GalleryMedia]
  updateGalleryMedia(where: GalleryMediaWhereUniqueInput!, data: GalleryMediaUpdateInput!): GalleryMedia
  updateGalleryMedias(data: [GalleryMediaUpdateArgs!]!): [GalleryMedia]
  deleteGalleryMedia(where: GalleryMediaWhereUniqueInput!): GalleryMedia
  deleteGalleryMedias(where: [GalleryMediaWhereUniqueInput!]!): [GalleryMedia]
  createGallery(data: GalleryCreateInput!): Gallery
  createGalleries(data: [GalleryCreateInput!]!): [Gallery]
  updateGallery(where: GalleryWhereUniqueInput!, data: GalleryUpdateInput!): Gallery
  updateGalleries(data: [GalleryUpdateArgs!]!): [Gallery]
  deleteGallery(where: GalleryWhereUniqueInput!): Gallery
  deleteGalleries(where: [GalleryWhereUniqueInput!]!): [Gallery]
  createComment(data: CommentCreateInput!): Comment
  createComments(data: [CommentCreateInput!]!): [Comment]
  updateComment(where: CommentWhereUniqueInput!, data: CommentUpdateInput!): Comment
  updateComments(data: [CommentUpdateArgs!]!): [Comment]
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteComments(where: [CommentWhereUniqueInput!]!): [Comment]
  createApplication(data: ApplicationCreateInput!): Application
  createApplications(data: [ApplicationCreateInput!]!): [Application]
  updateApplication(where: ApplicationWhereUniqueInput!, data: ApplicationUpdateInput!): Application
  updateApplications(data: [ApplicationUpdateArgs!]!): [Application]
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  deleteApplications(where: [ApplicationWhereUniqueInput!]!): [Application]
  createEmployee(data: EmployeeCreateInput!): Employee
  createEmployees(data: [EmployeeCreateInput!]!): [Employee]
  updateEmployee(where: EmployeeWhereUniqueInput!, data: EmployeeUpdateInput!): Employee
  updateEmployees(data: [EmployeeUpdateArgs!]!): [Employee]
  deleteEmployee(where: EmployeeWhereUniqueInput!): Employee
  deleteEmployees(where: [EmployeeWhereUniqueInput!]!): [Employee]
  createMachine(data: MachineCreateInput!): Machine
  createMachines(data: [MachineCreateInput!]!): [Machine]
  updateMachine(where: MachineWhereUniqueInput!, data: MachineUpdateInput!): Machine
  updateMachines(data: [MachineUpdateArgs!]!): [Machine]
  deleteMachine(where: MachineWhereUniqueInput!): Machine
  deleteMachines(where: [MachineWhereUniqueInput!]!): [Machine]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  image(where: ImageWhereUniqueInput!): Image
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  mainPageImage(where: MainPageImageWhereUniqueInput!): MainPageImage
  mainPageImages(where: MainPageImageWhereInput! = {}, orderBy: [MainPageImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MainPageImageWhereUniqueInput): [MainPageImage!]
  mainPageImagesCount(where: MainPageImageWhereInput! = {}): Int
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  projectImage(where: ProjectImageWhereUniqueInput!): ProjectImage
  projectImages(where: ProjectImageWhereInput! = {}, orderBy: [ProjectImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectImageWhereUniqueInput): [ProjectImage!]
  projectImagesCount(where: ProjectImageWhereInput! = {}): Int
  certificate(where: CertificateWhereUniqueInput!): Certificate
  certificates(where: CertificateWhereInput! = {}, orderBy: [CertificateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CertificateWhereUniqueInput): [Certificate!]
  certificatesCount(where: CertificateWhereInput! = {}): Int
  report(where: ReportWhereUniqueInput!): Report
  reports(where: ReportWhereInput! = {}, orderBy: [ReportOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReportWhereUniqueInput): [Report!]
  reportsCount(where: ReportWhereInput! = {}): Int
  reportImage(where: ReportImageWhereUniqueInput!): ReportImage
  reportImages(where: ReportImageWhereInput! = {}, orderBy: [ReportImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReportImageWhereUniqueInput): [ReportImage!]
  reportImagesCount(where: ReportImageWhereInput! = {}): Int
  award(where: AwardWhereUniqueInput!): Award
  awards(where: AwardWhereInput! = {}, orderBy: [AwardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AwardWhereUniqueInput): [Award!]
  awardsCount(where: AwardWhereInput! = {}): Int
  galleryMedia(where: GalleryMediaWhereUniqueInput!): GalleryMedia
  galleryMedias(where: GalleryMediaWhereInput! = {}, orderBy: [GalleryMediaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GalleryMediaWhereUniqueInput): [GalleryMedia!]
  galleryMediasCount(where: GalleryMediaWhereInput! = {}): Int
  gallery(where: GalleryWhereUniqueInput!): Gallery
  galleries(where: GalleryWhereInput! = {}, orderBy: [GalleryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GalleryWhereUniqueInput): [Gallery!]
  galleriesCount(where: GalleryWhereInput! = {}): Int
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput! = {}, orderBy: [CommentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommentWhereUniqueInput): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
  application(where: ApplicationWhereUniqueInput!): Application
  applications(where: ApplicationWhereInput! = {}, orderBy: [ApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ApplicationWhereUniqueInput): [Application!]
  applicationsCount(where: ApplicationWhereInput! = {}): Int
  employee(where: EmployeeWhereUniqueInput!): Employee
  employees(where: EmployeeWhereInput! = {}, orderBy: [EmployeeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EmployeeWhereUniqueInput): [Employee!]
  employeesCount(where: EmployeeWhereInput! = {}): Int
  machine(where: MachineWhereUniqueInput!): Machine
  machines(where: MachineWhereInput! = {}, orderBy: [MachineOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MachineWhereUniqueInput): [Machine!]
  machinesCount(where: MachineWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
