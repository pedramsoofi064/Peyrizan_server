# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Image {
  id: ID!
  title: String
  alt: String
  image: ImageFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  title: StringFilter
  alt: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ImageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  alt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ImageUpdateInput {
  title: String
  alt: String
  image: ImageFieldInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  title: String
  alt: String
  image: ImageFieldInput
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type mainPageImage {
  id: ID!
  alt: String
  image: ImageFieldOutput
}

input mainPageImageWhereUniqueInput {
  id: ID
}

input mainPageImageWhereInput {
  AND: [mainPageImageWhereInput!]
  OR: [mainPageImageWhereInput!]
  NOT: [mainPageImageWhereInput!]
  id: IDFilter
  alt: StringFilter
}

input mainPageImageOrderByInput {
  id: OrderDirection
  alt: OrderDirection
}

input mainPageImageUpdateInput {
  alt: String
  image: ImageFieldInput
}

input mainPageImageUpdateArgs {
  where: mainPageImageWhereUniqueInput!
  data: mainPageImageUpdateInput!
}

input mainPageImageCreateInput {
  alt: String
  image: ImageFieldInput
}

type Project {
  id: ID!
  titleFa: String
  titleEn: String
  summaryFa: String
  summaryEn: String
  descriptionFa: String
  descriptionEn: String
  employerFa: String
  employerEn: String
  advisorFa: String
  advisorEn: String
  locationFa: String
  locationEn: String
  progressPercentage: Int
  status: String
  startDate: DateTime
  endDate: DateTime
  images(where: ProjectImageWhereInput! = {}, orderBy: [ProjectImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectImageWhereUniqueInput): [ProjectImage!]
  imagesCount(where: ProjectImageWhereInput! = {}): Int
}

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  titleFa: StringFilter
  titleEn: StringFilter
  summaryFa: StringFilter
  summaryEn: StringFilter
  descriptionFa: StringFilter
  descriptionEn: StringFilter
  employerFa: StringFilter
  employerEn: StringFilter
  advisorFa: StringFilter
  advisorEn: StringFilter
  locationFa: StringFilter
  locationEn: StringFilter
  progressPercentage: IntNullableFilter
  status: StringNullableFilter
  startDate: DateTimeFilter
  endDate: DateTimeNullableFilter
  images: ProjectImageManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input ProjectImageManyRelationFilter {
  every: ProjectImageWhereInput
  some: ProjectImageWhereInput
  none: ProjectImageWhereInput
}

input ProjectOrderByInput {
  id: OrderDirection
  titleFa: OrderDirection
  titleEn: OrderDirection
  summaryFa: OrderDirection
  summaryEn: OrderDirection
  descriptionFa: OrderDirection
  descriptionEn: OrderDirection
  employerFa: OrderDirection
  employerEn: OrderDirection
  advisorFa: OrderDirection
  advisorEn: OrderDirection
  locationFa: OrderDirection
  locationEn: OrderDirection
  progressPercentage: OrderDirection
  status: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
}

input ProjectUpdateInput {
  titleFa: String
  titleEn: String
  summaryFa: String
  summaryEn: String
  descriptionFa: String
  descriptionEn: String
  employerFa: String
  employerEn: String
  advisorFa: String
  advisorEn: String
  locationFa: String
  locationEn: String
  progressPercentage: Int
  status: String
  startDate: DateTime
  endDate: DateTime
  images: ProjectImageRelateToManyForUpdateInput
}

input ProjectImageRelateToManyForUpdateInput {
  disconnect: [ProjectImageWhereUniqueInput!]
  set: [ProjectImageWhereUniqueInput!]
  create: [ProjectImageCreateInput!]
  connect: [ProjectImageWhereUniqueInput!]
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  titleFa: String
  titleEn: String
  summaryFa: String
  summaryEn: String
  descriptionFa: String
  descriptionEn: String
  employerFa: String
  employerEn: String
  advisorFa: String
  advisorEn: String
  locationFa: String
  locationEn: String
  progressPercentage: Int
  status: String
  startDate: DateTime
  endDate: DateTime
  images: ProjectImageRelateToManyForCreateInput
}

input ProjectImageRelateToManyForCreateInput {
  create: [ProjectImageCreateInput!]
  connect: [ProjectImageWhereUniqueInput!]
}

type ProjectImage {
  id: ID!
  alt: String
  file: ImageFieldOutput
  sortOrder: Int
  project: Project
}

input ProjectImageWhereUniqueInput {
  id: ID
}

input ProjectImageWhereInput {
  AND: [ProjectImageWhereInput!]
  OR: [ProjectImageWhereInput!]
  NOT: [ProjectImageWhereInput!]
  id: IDFilter
  alt: StringFilter
  sortOrder: IntNullableFilter
  project: ProjectWhereInput
}

input ProjectImageOrderByInput {
  id: OrderDirection
  alt: OrderDirection
  sortOrder: OrderDirection
}

input ProjectImageUpdateInput {
  alt: String
  file: ImageFieldInput
  sortOrder: Int
  project: ProjectRelateToOneForUpdateInput
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input ProjectImageUpdateArgs {
  where: ProjectImageWhereUniqueInput!
  data: ProjectImageUpdateInput!
}

input ProjectImageCreateInput {
  alt: String
  file: ImageFieldInput
  sortOrder: Int
  project: ProjectRelateToOneForCreateInput
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createmainPageImage(data: mainPageImageCreateInput!): mainPageImage
  createMainPageImages(data: [mainPageImageCreateInput!]!): [mainPageImage]
  updatemainPageImage(where: mainPageImageWhereUniqueInput!, data: mainPageImageUpdateInput!): mainPageImage
  updateMainPageImages(data: [mainPageImageUpdateArgs!]!): [mainPageImage]
  deletemainPageImage(where: mainPageImageWhereUniqueInput!): mainPageImage
  deleteMainPageImages(where: [mainPageImageWhereUniqueInput!]!): [mainPageImage]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(where: ProjectWhereUniqueInput!, data: ProjectUpdateInput!): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createProjectImage(data: ProjectImageCreateInput!): ProjectImage
  createProjectImages(data: [ProjectImageCreateInput!]!): [ProjectImage]
  updateProjectImage(where: ProjectImageWhereUniqueInput!, data: ProjectImageUpdateInput!): ProjectImage
  updateProjectImages(data: [ProjectImageUpdateArgs!]!): [ProjectImage]
  deleteProjectImage(where: ProjectImageWhereUniqueInput!): ProjectImage
  deleteProjectImages(where: [ProjectImageWhereUniqueInput!]!): [ProjectImage]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  image(where: ImageWhereUniqueInput!): Image
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  mainPageImage(where: mainPageImageWhereUniqueInput!): mainPageImage
  mainPageImages(where: mainPageImageWhereInput! = {}, orderBy: [mainPageImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: mainPageImageWhereUniqueInput): [mainPageImage!]
  mainPageImagesCount(where: mainPageImageWhereInput! = {}): Int
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  projectImage(where: ProjectImageWhereUniqueInput!): ProjectImage
  projectImages(where: ProjectImageWhereInput! = {}, orderBy: [ProjectImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectImageWhereUniqueInput): [ProjectImage!]
  projectImagesCount(where: ProjectImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
